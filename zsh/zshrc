# vim:set noexpandtab
# This came from Greg V's dotfiles:
#      https://github.com/myfreeweb/dotfiles
# Feel free to steal it, but attribution is nice
#
# thanks:
# http://selena.deckelmann.usesthis.com/
# https://github.com/mathiasbynens/dotfiles/blob/master/.functions
# https://superuser.com/questions/180148/how-do-you-get-screen-to-automatically-connect-to-the-current-ssh-agent-when-re
# https://github.com/nummi/my-config/blob/master/.zsh/completion.zsh
# http://robots.thoughtbot.com/silver-searcher-tab-completion-with-exuberant-ctags
# http://iterm2.com/shell_integration.html
# http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/
# https://github.com/xero/dotfiles
# https://github.com/eevee/rc

# External plugins {{{
source ~/.zsh/zsh-hl/zsh-syntax-highlighting.zsh
source ~/.zsh/zsh-hss/zsh-history-substring-search.zsh
# }}}

# XDG defaults {{{
: ${XDG_CONFIG_HOME:="$HOME/.config"}
: ${XDG_CACHE_HOME:="$HOME/.cache"}
: ${XDG_DATA_HOME:="$HOME/.local/share"}
: ${XDG_RUNTIME_DIR:="$HOME/.tmp"}
# }}}

# Color {{{
base16() {
	local SCHEME="$*"
	local BASE16_SHELL="$HOME/.zsh/base16-shell/base16-$SCHEME.$BASE16_BACKGROUND.sh"
	if [[ -s $BASE16_SHELL ]]; then
		source $BASE16_SHELL
		export BASE16_SCHEME="$SCHEME"
		echo -n $SCHEME > $XDG_CONFIG_HOME/base16/scheme
	else
		echo "Looks like $BASE16_SHELL does not exist :-("
	fi
}

background() {
	echo -n "$*" > $XDG_CONFIG_HOME/base16/background
	export BASE16_BACKGROUND="$*"
	base16 $BASE16_SCHEME
}

light() { background light }
dark() { background dark }
_base16() { compadd $(find ~/.zsh/base16-shell | grep dark.sh | xargs basename | sed -e "s/base16-//" -e "s/\.dark\.sh//") }
export BASE16_SCHEME="$(cat $XDG_CONFIG_HOME/base16/scheme 2>/dev/null || echo default)"
export BASE16_BACKGROUND="$(cat $XDG_CONFIG_HOME/base16/background 2>/dev/null || echo dark)"
background $BASE16_BACKGROUND
# }}}

# Support for tools, programming languages, etc {{{
# Less
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[38;5;246m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[04;33;146m'
export LESS="-R"
export LESSHISTFILE="$XDG_CACHE_HOME/less_history"
export MANWIDTH="120"

# Tmux
export TMUX_TMPDIR="$XDG_RUNTIME_DIR"

# Go
export GOPATH=~
export GOBIN=~/.local/bin
[[ -e $commands[brew] ]] && export BREWGO=$(brew --prefix go)

# JS
[[ -d /usr/local/lib/node_modules ]] && export NODE_PATH=/usr/local/lib/node_modules

# Java
[[ -e /usr/libexec/java_home ]] && export JAVA_HOME=$(/usr/libexec/java_home)
[[ -d /usr/local/opt/android-sdk ]] && export ANDROID_HOME=/usr/local/opt/android-sdk
export JRUBY_OPTS="-J-XX:+TieredCompilation -J-XX:TieredStopAtLevel=1 -J-noverify"
runjava() {
	cp $1 /tmp/Main.java
	(cd /tmp && javac Main.java && echo "--- compiled, running" && java Main)
}

# .NET Core
[[ -e $commands[dnvm.sh] ]] && source dnvm.sh

# Ruby
export RBXOPT=-X19
[[ -d /usr/local/var/rbenv ]] && export RBENV_ROOT=/usr/local/var/rbenv
bforkify() {
	bundle config local.$1 ~/src/github.com/myfreeweb/$1
}
bunforkify() {
	bundle config --delete local.$1
}

# Python
export PYTHONDONTWRITEBYTECODE=true
export VIRTUALENV_DISTRIBUTE=true
export PIP_USE_MIRRORS=true
export PYTHONSTARTUP=$XDG_CONFIG_HOME/python/rc.py

# Perl
export PERL_MB_OPT="--install_base \"$HOME/.local\""
export PERL_MM_OPT="INSTALL_BASE=$HOME/.local"
export PERL5LIB=~/.local/lib/perl5:$PERL5LIB

# Compiling stuff on OS X
[[ -e $commands[brew] ]] && export ARCHFLAGS="-arch x86_64"

# OCaml
[[ -e $commands[opam] ]] && eval $(opam config env)

# Haskell
:test() { stack ghci --ghc-options="-fno-hpc" } # for the vimux/ghci trick

# Rust
export RUST_SRC_PATH="$HOME/src/github.com/rust-lang/rust/src"
export CARGO_HOME="$XDG_DATA_HOME/cargo"
export CARGO_INSTALL_ROOT="$HOME/.local"
# }}}

# Aliases and functions {{{
[[ -e ~/.rc ]] && source ~/.rc
[[ ! -e $commands[gmake] ]] && alias gmake=make
dighost() { host $(dig $1 | grep ANSWER -C 1 | tail -n 1 | awk '{ print $5 }') }
mcd() { mkdir -p $1 && cd $1; }
icd() { DIR=$(ls | $MENU) && cd $DIR && icd }
prj() { cd ~/src/$(ghq list | $MENU) }
hst() { eval $(history -n 1 | tail -r | $MENU --layout=bottom-up) }
mdown() { pandoc -s -f markdown -t man "$*" | man -l - } # read markdown files like manpages

if [[ -n $TMUX ]]; then
	escseq() { printf "\033Ptmux;\033\033]$1\007\033\\" }
else
	escseq() { printf "\033]$1\007" }
fi

if [[ -n $ITERM_PROFILE && -o login ]]; then
	before_cmd_executes() { escseq "133;C" }
	after_cmd_executes() {
		escseq "133;D;$1"
		escseq "1337;RemoteHost=$USER@$(hostname -f)"
		escseq "1337;CurrentDir=$PWD"
	}
	escseq "1337;ShellIntegrationVersion=1"
	after_cmd_executes 0
else
	before_cmd_executes() { }
	after_cmd_executes() { }
fi

preexec() {
	before_cmd_executes
}

precmd() {
	# $? in prompt is wrong, can't pass %? to conditionals
	local exit_status="$?"
	if [[ $exit_status == 0 ]]; then SMILEY=')'; else SMILEY='('; fi
	after_cmd_executes $exit_status
	if [[ $PRIVATE == 1 ]]; then
		SCOLOR=$bg[magenta]$fg_bold[black]
	elif [[ ${HOST##*\.} == 'local' || ${HOST##*\.} == 'localdomain' || $HOST =~ '^[^\.]+$' ]]; then
		# green on *.local, *.localdomain and hostnames without dots
		SCOLOR=$fg_bold[green]
	else
		# red on everything else - that is, on production servers!
		SCOLOR=$fg_bold[red]
	fi
}

fancy-ctrl-z() {
	if [[ $#BUFFER -eq 0 ]]; then
		BUFFER=fg
		zle accept-line
	else
		zle push-input
		zle clear-screen
	fi
}
# }}}

# Basic settings {{{
# Modules
autoload -U colors && colors
autoload -U compinit && zmodload -i zsh/complist
autoload -U edit-command-line && zle -N edit-command-line
autoload -U url-quote-magic && zle -N self-insert url-quote-magic
autoload -U select-word-style && select-word-style bash
autoload -U zmv

# Keybindings
zmodload zsh/terminfo
bindkey -e # Emacs style keys in shell
bindkey '^xe' edit-command-line
bindkey '^x^e' edit-command-line
bindkey "\e[3~" delete-char # Del
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey '^H' backward-word
bindkey '^L' forward-word
zle -N hst && bindkey '^R' hst
zle -N fancy-ctrl-z && bindkey '^Z' fancy-ctrl-z
[[ -n $terminfo[kcuu1] ]] && bindkey $terminfo[kcuu1] history-substring-search-up
[[ -n $terminfo[kcud1] ]] && bindkey $terminfo[kcud1] history-substring-search-down

# Stuff
setopt pushd_ignore_dups auto_pushd auto_name_dirs auto_cd \
	transient_rprompt prompt_subst no_beep multios extended_glob interactive_comments

# History
setopt hist_ignore_dups hist_ignore_space hist_reduce_blanks hist_verify \
 hist_expire_dups_first hist_find_no_dups share_history extended_history \
 append_history inc_append_history

# Completion
setopt menu_complete # Autoselect the first suggestion
setopt complete_in_word
setopt no_complete_aliases # Actually: completes aliases! (I guess that means "no ~separate functions~ for aliases")
unsetopt always_to_end
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' insert-tab pending
zstyle ':completion:*' expand "yes"
zstyle ':completion:*' matcher-list "m:{a-zA-Z}={A-Za-z}" # ignore case
zstyle ':completion:*' list-colors ""
zstyle ':completion:*' menu select=2 _complete _ignored _approximate
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*:prefix:*' add-space true
zstyle ':completion:*:descriptions' format "|| %{${fg[yellow]}%}%d%{${reset_color}%}"
zstyle ':completion:*:messages' format $'\e[00;31m%d'
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric
zstyle ':completion:*:cd:*' ignore-parents parent pwd
zstyle ':completion:*:rm:*' ignore-line yes
zstyle ':completion:*:*:*:processes' list-colors "=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01"
zstyle ':completion:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"
zstyle ':completion:*:*:*:*:hosts' list-colors "=*=$color[cyan];$color[bg-black]"
zstyle ':completion:*:functions' ignored-patterns "_*"
zstyle ':completion:*:original' list-colors "=*=$color[red];$color[bold]"
zstyle ':completion:*:parameters' list-colors "=[^a-zA-Z]*=$color[red]"
zstyle ':completion:*:aliases' list-colors "=*=$color[green]"
fpath+=(
	~/.zsh/zsh-completions/src(N)
	$XDG_DATA_HOME/zsh/site-functions(N)
	/usr/local/share/zsh/site-functions(N)
)
fignore+=.DS_Store
compinit -i
compdef mcd=cd
_ctagscomp() { (( CURRENT == 2 )) && compadd $(cut -f 1 tags ctags .git/tags tmp/tags 2>/dev/null | grep -v '!_TAG') }
compdef _ctagscomp ack
compdef _ctagscomp ag
compdef _ctagscomp pt
_loadkeys() { compadd $(find ~/.ssh -perm 0600 ! -type s | xargs basename) }
compdef _loadkeys loadkeys
compdef _base16 base16

alias find="noglob find"
alias wget="noglob wget"

HISTFILE=$XDG_RUNTIME_DIR/history_zsh
HISTSIZE=4096
SAVEHIST=4096
setopt HIST_EXPIRE_DUPS_FIRST
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)
WORDCHARS='*?_-.[]~=&;!#$%^(){}<>' # Like default, but without / -- ^W must be useful in paths, like it is in vim, bash, tcsh
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export CLICOLOR="yes"

PROMPT='%{$SCOLOR%}${PWD/#~/~}%{$reset_color%} %{$fg_no_bold[yellow]%}:$SMILEY%{$reset_color%} '

cdpath=(~/src/github.com/myfreeweb)

typeset -U path # U for Unique, like a set; (N) == only if exists
path=(
	.git/safe/../../bin
	~/.local/bin(N) ~/bin(N) ~/.cask/bin(N)
	$BREWGO/bin(N) $BREWGO/libexec/bin(N) /usr/local/go/bin(N)
	$JAVA_HOME/bin(N)
	$RBENV_ROOT/shims(N)
	/usr/local/share/npm/bin(N)
	/usr/local/sbin /usr/local/bin /sbin /bin $path
)
export PATH
# }}}

# Default programs {{{
# (must come after PATH)
[[ -e $commands[more] ]] && export PAGER=more
[[ -e $commands[less] ]] && export PAGER=less
alias pg=$PAGER

[[ -e $commands[vi]   ]] && export EDITOR=vi   VISUAL=vi
[[ -e $commands[vim]  ]] && export EDITOR=vim  VISUAL=vim
[[ -e $commands[nvim] ]] && export EDITOR=nvim VISUAL=nvim
alias vi=$VISUAL

[[ -e $commands[percol] ]] && export MENU=percol
[[ -e $commands[peco]   ]] && export MENU=peco
[[ -e $commands[fzf]    ]] && export MENU=fzf
alias mn=$MENU

[[ -e $commands[ack] ]] && export SEARCH=ack
[[ -e $commands[ag]  ]] && export SEARCH=ag
[[ -e $commands[pt]  ]] && export SEARCH=pt
alias sr=$SEARCH
# }}}

# Arcane SSH/GPG agent stuff {{{
SSH_SOCK_LN=~/.ssh/ssh_auth_sock
if [[ $SSH_AUTH_SOCK =~ '^/private/tmp/com.apple.*' || ! -e $SSH_AUTH_SOCK ]]; then
	# Apple-provided or none => run agent right at $SSH_SOCK_LN
	[[ ! -e $SSH_SOCK_LN && -e $commands[ssh-agent] ]] && eval $(ssh-agent -a $SSH_SOCK_LN)
elif [[ -S $SSH_AUTH_SOCK && ! -h $SSH_AUTH_SOCK && $SSH_AUTH_SOCK != $SSH_SOCK_LN ]]; then
	# Socket and not symlink (== forwarded!) => make the symlink
	ln -sf $SSH_AUTH_SOCK $SSH_SOCK_LN
fi
export SSH_AUTH_SOCK=$SSH_SOCK_LN

if [[ -e ~/.gnupg/enable-agent ]]; then
	[[ -e ~/.gnupg/agent-info ]] && source ~/.gnupg/agent-info
	[[ ! -S $(echo $GPG_AGENT_INFO | cut -d : -f 1) ]] && eval $(gpg-agent --daemon --write-env-file ~/.gnupg/agent-info)
	export GPG_AGENT_INFO # not exported in the env-file
fi
export GPG_TTY=$(tty)
# }}}

[[ $TERM == "st-256color" ]] && export TERM=xterm-256color

[[ -e $commands[showkeys] ]] && showkeys
[[ -e $commands[fortune] ]] && fortune | (cowsay -f small || cat) 2&> /dev/null | (lolcat || cat) 2&>/dev/null
[[ -e ~/.zshrc.local ]] && source ~/.zshrc.local
[[ $PRIVATE == 1 ]] && unset HISTFILE
